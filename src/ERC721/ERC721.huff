/// @title ERC721
/// @author Huff Language <https://github.com/huff-language>
/// @notice An exemplary ERC721 token contract written in Huff.

/* Imports */
#include "./utils/Ownable.huff"
#include "./utils/Address.huff"
#include "./utils/Utils.huff"
#include "./utils/HashMap.huff"

/* Interface */
#define function mint(address,uint256) nonpayable returns ()

#define function name() nonpayable returns (string)
#define function symbol() nonpayable returns (string)
#define function tokenURI(uint256) nonpayable returns (string)

#define function transfer(address,uint256) nonpayable returns ()
#define function transferFrom(address,address,uint256) nonpayable returns ()
#define function approve(address,uint256) nonpayable returns ()
#define function setApprovalForAll(address,bool) nonpayable returns ()

#define function getApproved(uint256) view returns (address)
#define function isApprovedForAll(address,address) view returns (bool)
#define function ownerOf(uint256) view returns (address)
#define function balanceOf(address) view returns (uint256)

/* Events */
#define event Transfer(address,address,uint256)
#define event Approval(address,address,uint256)
#define event ApprovalForAll(address,address,bool)

/* Storage Slots */
#define constant NAME_LOCATION = FREE_STORAGE_POINTER()
#define constant SYMBOL_LOCATION = FREE_STORAGE_POINTER()
#define constant OWNER_LOCATION = FREE_STORAGE_POINTER()
#define constant BALANCE_LOCATION = FREE_STORAGE_POINTER()
#define constant SINGLE_APPROVAL_LOCATION = FREE_STORAGE_POINTER()

/* Constructor */
#define macro CONSTRUCTOR() = takes(0) returns (0) {
    // Sets msg.sender as the owner of the contract.
    OWNABLE_CONSTRUCTOR()
}

/* Returns the balance of the given address */
#define macro BALANCE_OF() = takes (0) returns (0) {
    0x04 calldataload                               // [account]
    [BALANCE_LOCATION] LOAD_ELEMENT_FROM_KEYS(0x00) // [balance]
    0x00 mstore                                     // []
    0x20 0x00 return                                // []
}

/* Returns the owner of the given token id */
#define macro OWNER_OF() = takes (0) returns (0) {
    0x04 calldataload                               // [tokenId]
    [OWNER_LOCATION] LOAD_ELEMENT_FROM_KEYS(0x00)   // [owner]
    0x00 mstore                                     // []
    0x20 0x00 return                                // []
}

/* Returns if the given address is approved for all tokens owned by an address */
#define macro IS_APPROVED_FOR_ALL() = takes (0) returns (0) {
    0x24 calldataload                               // [to]
    0x04 calldataload                               // [from, to]
    LOAD_ELEMENT_FROM_KEYS(0x00)                    // [value]
    iszero iszero                                   // [approved]
    0x00 mstore                                     // []
    0x20 0x00 return                                // []
}

/* Returns if the given address is approved for a token id */
#define macro GET_APPROVED() = takes (0) returns (0) {
    0x04 calldataload                               // [tokenId]
    [SINGLE_APPROVAL_LOCATION]                      // [location, tokenId]
    LOAD_ELEMENT_FROM_KEYS(0x00)                    // [spender]
    0x00 mstore                                     // []
    0x20 0x00 return                                // []
}

#define macro NAME() = takes (0) returns (0) {
    0x00 0x00 revert
}

#define macro SYMBOL() = takes (0) returns (0) {
    0x00 0x00 revert
}

#define macro TOKEN_URI() = takes (0) returns (0) {
    0x00 0x00 revert
}

#define macro SUPPORTS_INTERFACE() = takes (0) returns (0) {
    0x00 0x00 revert
}

/* Internal Transfer to take ownership of a token id from an address */
#define macro TRANSFER_TAKE_FROM(error) = takes(3) returns (3) {
    // input stack [from, to, tokenId]

    // check if from is the owner of the token
    dup1                                            // [from, from, to, tokenId]
    dup4                                            // [tokenId, from, from, to, tokenId]
    [OWNER_LOCATION] LOAD_ELEMENT_FROM_KEYS(0x00)   // [owner, from, from, to, tokenId]
    swap2                                           // [from, owner, from, to, tokenId]
    eq                                              // [from_is_owner, from, to, tokenId]
    cont jumpi                                      // [from, to, tokenId]
        <error> jump
    cont:

    // check if msg.sender == from
    dup1 caller                                     // [msg.sender, from, from, to, tokenId]
    eq                                              // [from_is_msg.sender, from, to, tokenId]
    is_authorized jumpi                             // [from, to, tokenId]

    // check if approved for all
    caller dup2                                     // [from, msg.sender, from, to, tokenId]
    LOAD_ELEMENT_FROM_KEYS(0x00)                    // [is_approved_for_all, from, to, tokenId]
    is_authorized jumpi                             // [from, to, tokenId]

    // check if approved for tokenId
    dup3                                            // [tokenId, from, to, tokenId]
    [SINGLE_APPROVAL_LOCATION]                      // [SINGLE_APPROVAL_LOCATION, tokenId, from, to, tokenId]
    LOAD_ELEMENT_FROM_KEYS(0x00)                    // [address_approved_for_tokenId, from, to, tokenId]
    caller eq                                       // [msg.sender_approved_for_tokenId, from, to, tokenId]
    is_authorized jumpi                             // [from, to, tokenId]
        <error> jump
    is_authorized:

    // update balance of from
    0x01 dup2                                       // [from, 1, from, to, tokenId]
    [BALANCE_LOCATION] LOAD_ELEMENT_FROM_KEYS(0x00) // [balance, 1, from, to, tokenId]
    sub dup2                                        // [from, balance-1, from, to, tokenId]
    [BALANCE_LOCATION]
    STORE_ELEMENT_FROM_KEYS(0x00)                   // [from, to, tokenId]

}

/* Internal Transfer to give ownership of a token id to an address */
#define macro TRANSFER_GIVE_TO() = takes(3) returns (3) {
    // Input stack: [from, to, tokenId]

    // Load the Balances
    dup2                                            // [to, from, to, tokenId]
	[BALANCE_LOCATION]                              // [balance_storage_location, to, from, to, tokenId]
    LOAD_ELEMENT_FROM_KEYS(0x00)                    // [balance, from, to, tokenId]
    0x01 add                                        // [balance + 1, from, to, tokenId]

    // Update balance
	dup3                                            // [to, balance + 1, from, to, tokenId]
    [BALANCE_LOCATION]                              // [balance_storage_location, to, balance + 1, from, tokenId]
    STORE_ELEMENT_FROM_KEYS(0x00)                   // [from, to, tokenId]

    // Update ownerOf
    dup2                                            // [to, from, to, tokenId]
    dup4                                            // [tokenId, to, from, to, tokenId]
    [OWNER_LOCATION]                                // [owner_storage_location, to, from, to, tokenId]
    STORE_ELEMENT_FROM_KEYS(0x00)                   // [from, to, tokenId]

    // Update approval
    0x00 dup4                                       // [tokenId, address(0), from, to, tokenId]
    [SINGLE_APPROVAL_LOCATION]                      // [single_approval_storage_location, tokenId, address(0), from, to, tokenId]
    STORE_ELEMENT_FROM_KEYS(0x00)                   // [from, to, tokenId]
}

/* Approval Macro */
#define macro APPROVE() = takes (0) returns (0) {
    // Get owner from calldata
    0x24 calldataload dup1                          // [tokenId, tokenId]
    [OWNER_LOCATION]                                // [owner_storage_location, tokenId, tokenId]
    LOAD_ELEMENT_FROM_KEYS(0x00)                    // [owner, tokenId]
    dup1 caller                                     // [msg.sender, owner, owner, tokenId]
    eq                                              // [is_sender_owner, owner, tokenId]

    // Check if approved for all
    caller dup3                                     // [owner, msg.sender, is_sender_owner, owner, tokenId]
    LOAD_ELEMENT_FROM_KEYS(0x00)                    // [is_approved_for_all, is_sender_owner, owner, tokenId]]
    or cont jumpi                                   // [owner, tokenId]
        error jump
    cont:

    // store approval
    0x04 calldataload dup1 dup4                     // [tokenId, spender, spender, owner, tokenId]
    [SINGLE_APPROVAL_LOCATION]                      // [single_approval_storage_location, tokenId, spender, spender, owner, tokenId]
    STORE_ELEMENT_FROM_KEYS(0x00)                   // [spender, owner, tokenId]
    swap1                                           // [owner, spender, tokenId]

    // Emit the approval event
    __EVENT_HASH(Approval)                          // [sig, owner, spender, tokenId]
    0x00 0x00                                       // [0, 0, sig, owner, spender, tokenId]
    log4                                            // []

    // Exit the current calling context
    stop

    error:
        0x00 0x00 revert
}

/* Give an address approval for all owned tokens */
#define macro SET_APPROVAL_FOR_ALL() = takes (0) returns (0) {
    // Set the operator as approved for all
    0x24 calldataload                               // [approved]
    0x04 calldataload                               // [operator, approved]
    caller                                          // [msg.sender, operator, approved]
    STORE_ELEMENT_FROM_KEYS(0x00)                   // []

    // Emit the approval event
    0x04 calldataload                               // [operator]
    caller                                          // [msg.sender, operator]
    0x24 calldataload                               // [approved, msg.sender, operator]
    0x00 mstore                                     // [owner, operator]
    __EVENT_HASH(ApprovalForAll)                    // [sig, owner, operator]
    0x00 0x00                                       // [0, 32, sig, owner, operator]
    log4                                            // []

    stop
    error:
        0x00 0x00 revert
}

/* Transfer ownership of a token (specified by id) from one address to another */
#define macro TRANSFER_FROM() = takes(0) returns(0) {
    // Setup the stack for the transfer function.
    0x44 calldataload                               // [tokenId]
    0x24 calldataload                               // [to, tokenId]
    0x04 calldataload                               // [from, to, tokenId]

    TRANSFER_TAKE_FROM(error)                       // [from, to, tokenId]
    TRANSFER_GIVE_TO()                              // [from, to, tokenId]

    // Emit the transfer event.
    __EVENT_HASH(Transfer)                          // [sig, from, to, tokenId]
    0x20 0x00                                       // [0, 0, sig, from, to, tokenId]
    log4                                            // []

    stop

    // Error destination.
    error:
        0x00 0x00 revert
}

#define macro SAFE_TRANSFER_FROM() = takes(0) returns (0) {
    0x00 0x00 revert
}

#define macro SAFE_TRANSFER_FROM_WITH_DATA() = takes(0) returns (0) {
    0x00 0x00 revert
}

/* Mint Functions */
#define macro MINT() = takes(0) returns (0) {
    // Ensure that the sender is the owner of the contract.
    ONLY_OWNER()

    // Setup the stack for the mint function.
    0x24 calldataload                               // [tokenId]
    0x04 calldataload                               // [to, tokenId]
    0x00                                            // [from (0x00), to, tokenId]
    dup3                                            // [tokenId, from (0x00), to, tokenId]

    // Check no one owns the given token id
    [OWNER_LOCATION] LOAD_ELEMENT_FROM_KEYS(0x00)   // [owner, from (0x00), to, tokenId]
    iszero iszero error jumpi                       // [from (0x00), to, tokenId]

    // Give tokens to the recipient.
    TRANSFER_GIVE_TO()                              // [from (0x00), to, tokenId]

    // Emit the transfer event.
    __EVENT_HASH(Transfer)                          // [sig, from (0x00), to, tokenId]
    0x00 0x00                                       // [0, 0, sig, from (0x00), to, tokenId]
    log4                                            // []

    stop

    error:
        0x00 0x00 revert
}

// Main Macro
#define macro MAIN() = takes(0) returns (0) {
    // Identify which function is being called.
    0x00 calldataload 0xE0 shr
    dup1 __FUNC_SIG(transferFrom) eq transferFrom jumpi
    dup1 __FUNC_SIG(safeTransferFrom) eq safeTransferFrom jumpi
    dup1 __FUNC_SIG(safeTransferFromWithData) eq safeTransferFromWithData jumpi
    dup1 __FUNC_SIG(approve) eq approve jumpi
    dup1 __FUNC_SIG(setApprovalForAll) eq setApprovalForAll jumpi
    dup1 __FUNC_SIG(getApproved) eq getApproved jumpi
    dup1 __FUNC_SIG(mint) eq mint jumpi
    dup1 __FUNC_SIG(balanceOf) eq balanceOf jumpi
    dup1 __FUNC_SIG(ownerOf) eq ownerOf jumpi
    dup1 __FUNC_SIG(name) eq name jumpi
    dup1 __FUNC_SIG(symbol) eq symbol jumpi
    dup1 __FUNC_SIG(tokenURI) eq tokenURI jumpi
    dup1 __FUNC_SIG(supportsInterface) eq supportsInterface jumpi
    dup1 __FUNC_SIG(isApprovedForAll) eq isApprovedForAll jumpi

    // Prvent Calling functions with an unmatched function signature
    0x00 0x00 revert

    transferFrom:
        TRANSFER_FROM()
    safeTransferFrom:
        SAFE_TRANSFER_FROM()    // not implemented yet
    safeTransferFromWithData:
        SAFE_TRANSFER_FROM_WITH_DATA()  // not implemented yet
    mint:
        MINT()
    balanceOf:
        BALANCE_OF()
    approve:
        APPROVE()
    getApproved:
        GET_APPROVED()
    setApprovalForAll:
        SET_APPROVAL_FOR_ALL()
    name:
        NAME()                  // not implemented yet
    symbol:
        SYMBOL()                // not implemented yet
    tokenURI:
        TOKEN_URI()             // not implemented yet
    supportsInterface:
        SUPPORTS_INTERFACE()    // not implemented yet
    isApprovedForAll:
        IS_APPROVED_FOR_ALL()
    ownerOf:
        OWNER_OF()
}
